using System;

namespace Problem27
{
    class Program
    {
        static void Main()
        {
            Console.WriteLine("Problem 27");

            Test();

            const long upperLimit = 1000;
            (long, long, long) result = Solve(upperLimit);
            long a = result.Item1;
            long b = result.Item2;
            long maxPrimes = result.Item3;
            long product = a * b;

            Console.WriteLine($"product = {product}");

            Console.WriteLine("Done");
            Console.ReadKey();
        }

        // A sequence of length 71, is generated by a=-61, b=971, the product is -59231
        private static void Test()
        {
            Func<long, long> Quadratic;

            Quadratic = n => n * n + 999 * n + 997;
            long maxPrimes = FindNumberConsecutivePrimesForQuadratic(Quadratic);    // 5

            Quadratic = n => n * n + n + 41;
            maxPrimes = FindNumberConsecutivePrimesForQuadratic(Quadratic);         // 40

            Quadratic = n => n * n - 39 * n - 23;
            maxPrimes = FindNumberConsecutivePrimesForQuadratic(Quadratic);         // 45

            Quadratic = n => n * n - 61 * n + 971;
            maxPrimes = FindNumberConsecutivePrimesForQuadratic(Quadratic);         // 71

            Quadratic = n => n * n - 79 * n + 1601;
            maxPrimes = FindNumberConsecutivePrimesForQuadratic(Quadratic);         // 80

            Quadratic = n => n * n - 999 * n - 999;
            maxPrimes = FindNumberConsecutivePrimesForQuadratic(Quadratic);         // 1000

            Quadratic = n => n * n - 999 * n + 61;
            maxPrimes = FindNumberConsecutivePrimesForQuadratic(Quadratic);         // 1011
            bool verified = VerifySolution(Quadratic, maxPrimes);
        }

        private static (long, long, long) Solve(long upperLimit)
        {
            long maxConsecutivePrimes = 0;
            long aValue = 0;
            long bValue = 0;

            for (long a = -upperLimit + 1; a < upperLimit; a++)
            {
                for (long b = -upperLimit; b <= upperLimit; b++)
                {
                    CheckConstraints(upperLimit, a, b);
                    Func<long, long> Quadratic = n => n * n + a * n + b;
                    long numberConsecutivePrimes = FindNumberConsecutivePrimesForQuadratic(Quadratic);

                    if (numberConsecutivePrimes > maxConsecutivePrimes)
                    {
                        maxConsecutivePrimes = numberConsecutivePrimes;
                        aValue = a;
                        bValue = b;

                        Console.WriteLine($"a = {a, 6}, b = {b, 6}, maxPrimes = {maxConsecutivePrimes, 10}");

                        bool verified = VerifySolution(Quadratic, numberConsecutivePrimes);
                        if (!verified)
                        {
                            Console.WriteLine("Solution verification failed");
                        }
                    }
                }
            }

            return (aValue, bValue, maxConsecutivePrimes);
        }

        private static bool VerifySolution(Func<long, long> Quadratic, long numberPrimes)
        {
            for (int n = 0; n < numberPrimes; n++)
            {
                long value = Quadratic(n);

                if (!IsPrime(value))
                {
                    return false;
                }
            }

            return true;
        }

        //private static (long, long, long) Solve2(long upperLimit)
        //{
        //    long maxPrimes = 0;
        //    long aValue = 0;
        //    long bValue = 0;

        //    for (long a = -upperLimit; a <= upperLimit; a++)
        //    {
        //        for (long b = -upperLimit; b <= upperLimit; b++)
        //        {
        //            CheckConstraints(upperLimit, a, b);
        //            Func<long, long> Quadratic = n => n * n + a * n + b;
        //            long numberPrimes = FindMaxNumberPrimesForQuadratic(Quadratic);

        //            if (numberPrimes > maxPrimes)
        //            {
        //                maxPrimes = numberPrimes;
        //                aValue = a;
        //                bValue = b;

        //                Console.WriteLine($"aValue = {aValue, 6}, bValue = {bValue, 6}, maxPrimes = {maxPrimes, 10}");
        //            }
        //        }
        //    }

        //    return (aValue, bValue, maxPrimes);
        //}

        private static void CheckConstraints(long upperLimit, long a, long b)
        {
            bool assertion = Math.Abs(a) < upperLimit && Math.Abs(b) <= upperLimit;

            if (!assertion)
            {
                Console.WriteLine($"Assertion failed for a = {a, 6} and b = {b, 6}");
            }
        }

        private static long FindNumberConsecutivePrimesForQuadratic(Func<long, long> Quadratic)
        {
            long numberPrimes = 0;
            long number = 0;

            while (true)
            {
                long value = Quadratic(number);

                if (!IsPrime(value))
                {
                    break;    
                }

                number++;
                numberPrimes++;
            }

            return numberPrimes;
        }

        public static bool IsPrime(long candidate)
        {
            if ((candidate & 1) == 0)
            {
                if (candidate == 2)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }

            for (long i = 3; (i * i) <= candidate; i += 2)
            {
                if (candidate % i == 0)
                {
                    return false;
                }
            }

            return candidate != 1;
        }
    }
}
